{"version":3,"sources":["Welcome.js","GamePage.js","App.js","serviceWorker.js","index.js"],"names":["WelcomePage","this","props","displayPage","className","onClick","changeState","Component","GamePage","moveNum","patternCheck","event","preventDefault","document","getElementById","value","pattern","alert","checkWinner","user_value","target","comp_value","compArray","length","class","id","type","placeholder","required","App","state","page","i","charAt","createPattern","setState","temp","Welcome","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAiBiBA,E,4KAZTC,KAAKC,MAAMC,gB,+BAEL,IAAD,OACP,OACE,yBAAKC,UAAU,WACb,mDACA,4BAAQA,UAAU,iBAAiBC,QAAS,kBAAI,EAAKC,gBAArD,sB,GATgBC,aC6DXC,G,kNA3DXC,QAAU,E,EACVC,aAAe,SAACC,GACZA,EAAMC,iBACaC,SAASC,eAAe,cAAcC,QACtC,EAAKb,MAAMc,QAE1BC,MAAM,+CAGNA,MAAM,uC,EAGdC,YAAc,SAACP,GACf,IAAIQ,EAAaR,EAAMS,OAAOL,MAC1BM,EAAa,EAAKnB,MAAMoB,UAAU,EAAKb,SAC3C,GAAG,EAAKA,UAAY,EAAKP,MAAMoB,UAAUC,OAGjC,OAFJN,MAAM,yCACF,EAAKR,QAAU,GAGpBU,IAAeE,EACdJ,MAAM,6BAEc,SAAfE,GAA0C,aAAfE,GAGZ,UAAfF,GAA2C,SAAfE,GAGb,aAAfF,GAA8C,UAAfE,EALpCJ,MAAM,uBASNA,MAAM,0BAEV,EAAKR,W,uDAGD,OACI,6BACI,oDACA,4BAAQL,UAAU,iBAAiBW,MAAM,OAAOV,QAASJ,KAAKiB,aAC1D,0BAAMM,MAAM,eACP,6BACT,6BALJ,KAKe,4BAAQpB,UAAU,iBAAiBW,MAAM,QAAQV,QAASJ,KAAKiB,aACtE,0BAAMM,MAAM,gBACP,6BACT,6BARJ,KAQe,4BAAQpB,UAAU,iBAAiBW,MAAM,WAAWV,QAASJ,KAAKiB,aACzE,0BAAMM,MAAM,mBACP,6BACT,8BACI,2BAAOC,GAAG,aAAaC,KAAK,OAAOC,YAAY,qBAAqBC,UAAQ,IAC5E,6BAAS,2BAAOJ,MAAM,iBAAiBE,KAAK,iB,GAtDzCnB,cC8BRsB,E,4MA1BbP,UAAY,CAAC,OAAO,OAAO,WAAW,S,EACtCN,QAAU,G,EACVc,MAAQ,CACNC,MAAO,G,8DAGP,IAAI,IAAIC,EAAI,EAAGA,EAAI/B,KAAKqB,UAAUC,OAAOS,IACvC/B,KAAKe,QAAUf,KAAKe,QAAUf,KAAKqB,UAAUU,GAAGC,OAAO,K,oCAIzDhC,KAAKiC,gBACLjC,KAAKkC,SAAS,CACZJ,MAAO,M,+BAGD,IAAD,OACDK,EAAOnC,KAAK6B,MAAMC,KAAO,kBAAC,EAAD,CAAUf,QAASf,KAAKe,QAASM,UAAWrB,KAAKqB,YAAe,kBAACe,EAAD,CAAalC,YAAa,kBAAI,EAAKA,iBAClI,OACE,6BACGiC,O,GArBS7B,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SDyHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.98e3860b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass WelcomePage extends Component {\r\n   \r\n    changeState() {\r\n        this.props.displayPage();\r\n    }\r\n    render() {\r\n      return (\r\n        <div className=\"welcome\"> \r\n          <h2>ROCK PAPER SCISSORS</h2>\r\n          <button className=\"welcome-button\" onClick={()=>this.changeState()}>Click to Play</button>\r\n        </div>\r\n      );\r\n    }\r\n  } \r\n\r\n  export default WelcomePage;","import React, { Component } from 'react';\r\n\r\nclass GamePage extends Component {\r\n        \r\n    moveNum = 0;\r\n    patternCheck = (event)  => {\r\n        event.preventDefault();\r\n        var user_pattern = document.getElementById(\"input_text\").value;\r\n        var comp_pattern = this.props.pattern;\r\n        if(user_pattern === comp_pattern) {\r\n            alert(\"You have guessed the right pattern hurray!!\");\r\n        }\r\n        else {\r\n            alert(\"The pattern you entered is wrong!!\");\r\n        }\r\n    }\r\n    checkWinner = (event) => {\r\n    var user_value = event.target.value;\r\n    var comp_value = this.props.compArray[this.moveNum];\r\n    if(this.moveNum === this.props.compArray.length) {\r\n        alert('You have completed all the moves');\r\n            this.moveNum = 0;\r\n            return;\r\n        }\r\n    if(user_value === comp_value) {\r\n        alert(\"It is a draw both lost!!!\");\r\n    }\r\n    else if((user_value === \"Rock\") && (comp_value === \"Scissors\")) {\r\n        alert(\"Congrats!!! You Won\");\r\n    }\r\n    else if((user_value === \"Paper\") && (comp_value === \"Rock\")) {\r\n        alert(\"Congrats!!! You Won\");\r\n    }\r\n    else if((user_value === \"Scissors\") && (comp_value === \"Paper\")) {\r\n        alert(\"Congrats!!! You Won\");\r\n    }\r\n    else {\r\n        alert(\"You Lost, Computer Won\");\r\n    }\r\n    this.moveNum++;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welcome to Game Page</h1>\r\n                <button className=\"welcome-button\" value=\"Rock\" onClick={this.checkWinner}>\r\n                    <span class=\"icon rock\"></span>\r\n                </button><br></br>\r\n                <br></br>  <button className=\"welcome-button\" value=\"Paper\" onClick={this.checkWinner}>\r\n                    <span class=\"icon paper\"></span>\r\n                </button><br></br>\r\n                <br></br>  <button className=\"welcome-button\" value=\"Scissors\" onClick={this.checkWinner}>\r\n                    <span class=\"icon scissors\"></span>\r\n                </button><br></br>\r\n                <form>\r\n                    <input id=\"input_text\" type=\"text\" placeholder=\"Enter your pattern\" required/>\r\n                    <br></br><input class=\"welcome-button\" type=\"submit\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GamePage;","import React, { Component } from 'react';\nimport WelcomePage from './Welcome.js';\nimport './App.css';\nimport GamePage from './GamePage.js';\n\nclass App extends Component {\n  compArray = [\"Rock\",\"Rock\",\"Scissors\",\"Paper\"];\n  pattern = '';\n  state = {\n    page : false,\n  }\n  createPattern() {\n    for(var i = 0; i < this.compArray.length;i++) {\n      this.pattern = this.pattern + this.compArray[i].charAt(0);\n    }\n  }\n  displayPage() {\n    this.createPattern();\n    this.setState({\n      page : true,\n    })\n  }\n  render() {\n    const temp = this.state.page ? <GamePage pattern={this.pattern} compArray={this.compArray}/> : <WelcomePage displayPage={()=>this.displayPage()}/> \n    return (\n      <div>\n        {temp}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}